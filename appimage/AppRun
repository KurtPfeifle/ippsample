#!/bin/bash

# (c) 2017 Kurt Pfeifle
# License: MIT
#
# The purpose of this custom AppRun script is to enablesymlinking the AppImage and invoking the corresponding
# binary depending on which symlink name was used to invoke the AppImage.
#
# It also provides some additional help parameters in order to allow faster familiarization with functionality
# embedded in this AppImage.
#

HERE="$(dirname "$(readlink -f "${0}")")"

# https://github.com/istopwg/ippsample/blob/2c6a86046a5ef696792b6c22fd1bbeaef43647a8/config.h.in#L39-L51
export CUPS_DATADIR="$HERE/usr/share/cups"

#env

function help() {
echo "
 --------------------------------------------------------------------------------------------
   Sample Implementation of an Internet Printing Protocol (IPP) Server with assorted Tools.
       Published by ISTO Printer Working Group (PWG), provided here as an AppImage.
 --------------------------------------------------------------------------------------------

 (This package uses the AppImage software packaging technology
  for Linux ['One App == One File'] for easy availability of
  this IPP testing toolkit across all major Linux distributions.)


 Usage:
 ------

   $ARGV0 --help
                 # This message

   $ARGV0 --ippserver|ippfind|ipptool|ippproxy
                 # Run the named sub-command

   $ARGV0 --listtestdoc
                 # List available, builtin test documents

   $ARGV0 --extracttestdoc
                 # Extract available, builtin test documents

   $ARGV0 --listtest
                 # List available, embedded IPP test files

   $ARGV0 --cat <testfile>
                 # Print contents of named IPP test file
                 # (By re-directing the output you can extract the file)

   $ARGV0 --listman
                 # List available, embedded manual pages

   $ARGV0 --man ippserver|ippfind|ipptool|ipptoolfile|ippproxy
                 # Display embedded manual page(s)

   $ARGV0 --listhtml
                 # List as HTML embedded manual page(s)

   $ARGV0 --html ippserver|ippfind|ipptool|ipptoolfile|ippproxy
                 # Use browser to display embedded manual page(s)

   $ARGV0 --listfile
                 # List all files embedded in AppImage

   $ARGV0 --listexe
                 # List all executables embedded in AppImage

   $ARGV0 --listreadme
                 # List all READMEs embedded in AppImage

   $ARGV0 --readme <path/to/readme>
                 # Show content of README embedded in AppImage (for path see \"$ARGV0 listreadme\")

   $ARGV0 --listdir
                 # List all directories embedded in AppImage

   $ARGV0 --appimage-help
                 # Show available AppImage options

 ---------------------------------------------------------------------------------------------
 NOTE: The execution of this AppImage is controlled by a custom AppRun script. The state of
 this script is experimental and preliminary. Hence it may not work as expected, or miss some
 functionality. You can hack on this script by unpacking this AppImage into a local sub
 directory [currently named 'squashfs-root'] with this command:

       $ARGV0 --appimage-extract

 After you're done with your hacks, repackage the AppImage again with this command:

       appimagetool [/path/to/]squashfs-root [/path/to/]ippsample-NEW.AppImage

 Latest versions of tools provided by AppImageKit are always available from
   * https://github.com/AppImage/AppImageKit/releases/     and
   * https://github.com/AppImage/AppImageUpdate/releases/
 ---------------------------------------------------------------------------------------------
"
}


if [ "x$1" == "xhelp" -o "x$1" == "x--help" -o "x$1" == "x-h" ] ; then
    help | less
    exit $?
fi


if [ x"$1" == "xlistman" -o x"$1" == "x--listman" ] ; then
    cd "$HERE"
    echo ""
    echo "Open manual pages by using following params to $ARGV0:"
    echo ""
    find usr/share/man* -type f | sed 's#^#  --man #'
    echo ""
    exit $?
fi


if [ x"$1" == "xman"  -o  x"$1" == "x--man" ] ; then
    export MANPATH="$HERE/usr/share/man:$MANPATH"
    shift
    exec man "$@"
fi


if [ x"$1" == "xlistdir" -o x"$1" == "x--listdir" ] ; then
    cd "$HERE"
    echo ""
    find . -type d | sed 's#^./#  dir #'
    echo ""
    exit $?
fi


if [ x"$1" == "xlistexe" -o x"$1" == "x--listexe" ] ; then
    cd "$HERE"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | grep '/bin/' | sed 's#./usr/bin/#  #' | sort -V
    echo ""
    exit $?
fi


if [ x"$1" == "xlistfile" -o x"$1" == "x--listfile" ] ; then
    cd "$HERE"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | sed 's#^./#  file: #'
    echo ""
    exit $?
fi


if [ x"$1" == "xlistreadme" -o x"$1" == "x--listreadme" ] ; then
    cd "$HERE"
    echo ""
    echo "Display README and text file in terminal by using following params to $ARGV0:"
    echo ""
    find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" -o -name "*.md" | sed 's#^./#  --readme #'
    echo ""
    exit $?
fi


if [ x"$1" == "xreadme" -o x"$1" == "x--readme" ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the README you want to open."
        echo "   For available READMEs run \"$ARGV0 listreadme\"."
    else
        readmefile=$( find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" -o -name "*.md" | grep "${1}" | sort -rV | head -n 1 )
        cat $readmefile
        sleep 0
    fi
    echo ""
   exit $?
fi


if [ x"$1" == "xlisthtml" -o x"$1" == "x--listhtml" ] ; then
    cd "$HERE"
    echo ""
    echo "Open HTML files in your preferred browser by using following params to $ARGV0:"
    echo ""
    find . -type f -name "*.html" | sed 's#^./#  --html #'
    echo ""
    exit $?
fi


if [ x"$1" == "xhtml" -o x"$1" == "x--html" ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the HTML file you want to open."
        echo "   For available HTML documents run \"$ARGV0 listhtml\"."
    else
        htmlfile=$( find . -type f -name "*.html" | grep ${1/.html/}.html | sort -rV | head -n 1 )
        xdg-open $htmlfile
        sleep 5
    fi
    echo ""
    exit $?
fi


if [ x"$1" == "xextracttestdoc" -o x"$1" == "x--extracttestdoc" ] ; then
    cd "$HERE/usr/share/cups/ipptool"
    shift 1
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the test document you want to extract."
        echo "   For available test documents run \"$ARGV0 listtestdoc\"."
    else
        testdocname=$( basename ${1} )
        mkdir -p ${HOME}/ai-tmp
        cat $1 > ${HOME}/ai-tmp/${testdocname}
        echo " Requested IPP print test document was extracted as '${HOME}/ai-tmp/${testdocname}'."
        sleep 0
    fi
    echo ""
    exit $?
fi


if [ x"$1" == "xcat" -o x"$1" == "x--cat" ] ; then
    cd "$HERE"
    shift 1
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the testfile file you want to see."
        echo "   For available testfiles run \"$ARGV0 listtest\"."
    else
        testfile=$( find . -type f -name "*.test" | grep "${1/.test/}.test" | sort -rV | head -n 1 )
        cat $testfile
        sleep 0
    fi
    echo ""
    exit $?
fi


if [ x"$1" == "xlisttestdoc" -o x"$1" == "x--listtestdoc" ] ; then
    shift 1
    cd $HERE/usr/share/cups/ipptool
    echo
    echo "======= 2D ================="
    echo "JPG:"
    ls -1 *.jpg   | sed 's#^#  #'
    echo
    echo "PCL:"
    ls -1 *.pcl   | sed 's#^#  #'
    echo
    echo "PDF:"
    ls -1 *.pdf   | sed 's#^#  #'
    echo
    echo "PostScript:"
    ls -1 *.ps    | sed 's#^#  #'
    echo
    echo "PWG-Raster:"
    ls -1 *.pwg.gz| sed 's#^#  #'
    echo
    echo
    echo "======= 3D ================="
    echo "3MF:"
    ls -1 *.3mf   | sed 's#^#  #'
    echo
    echo "SCAD:"
    ls -1 *.scad  | sed 's#^#  #'
    echo
    echo "SLA:"
    ls -1 *.sla   | sed 's#^#  #'
    echo
    echo "STL:"
    ls -1 *.stl   | sed 's#^#  #'
    echo
    echo "( ^^^^^^^^ 3D testing not yet supported)"
    echo "----------------------------------------"
    echo
    exit $?
fi


if [ x"$1" == "xlisttest" -o x"$1" == "x--listtest" ] ; then
    shift 1
    cd $HERE/usr/share/cups/ipptool
    exec ls *.test
fi


#set -x
if [ ! -z $APPIMAGE ] ; then
    BINARY_NAME=$(basename "$ARGV0")    # For this AppImage, BINARY_NAME will always be 'ippsample', which does not exist.
                                        # Only names currently supported are ippserver, ipptool, ippfind, ippproxy.
    #echo BINARY_NAME=$BINARY_NAME
    #echo APPIMAGE=$APPIMAGE
    #echo ARGV0=$ARGV0
    #echo dollar0=$0
    #echo dollar1=$1
    #echo dollar_at="$@"
    if [ x"$1" == "x" ] ; then
            exec "$HERE/usr/bin/ippserver"
    fi
    if [ -e "$HERE/usr/bin/$BINARY_NAME" ] ; then
        exec "$HERE/usr/bin/$BINARY_NAME" "$@"
    else
        if [ -e "$HERE/usr/bin/$1" ] ; then
            BINARY_NAME=$1
            shift
            exec "$HERE/usr/bin/$BINARY_NAME" "$@"
        elif [ x"$1" == xipptransform -o x"$1" == "xipptransform3d" ] ;then
            echo ""
            echo " ipptransform/ipptransform3 are not supported at this time."
            echo ""
            exit $?
        else
            exec "$HERE/usr/bin/ippserver" "$@"
        fi
    fi
else
      shift
      exec "$HERE/usr/bin/ippserver" "$@"
fi
